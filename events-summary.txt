
Ways of using web events

1. Inline event handlers aka event handler HTML attributes ( Do not use, as it's outdated, not best practices, hard to maintain)
It is the earliest method of registering event handlers found on the web.
    
    i.e. <button onclick="bgChange()">Press me</button>
        function bgChange() {
            const rndCol = 'rgb(' + random(255) + ',' + random(255) + ',' + random(255) + ')';
            document.body.style.backgroundColor = rndCol;
        }
    You could also insert JavaScript directly inside the attribute, for example:
    <button onclick="alert('Hello, this is my old-fashioned event handler!');">Press me</button>


2. Event handler property 

    i.e. const btn = document.querySelector('button');

        btn.onclick = function() {
            const rndCol = 'rgb(' + random(255) + ',' + random(255) + ',' + random(255) + ')';
            document.body.style.backgroundColor = rndCol;
        }

    The onclick property is the event handler property being used in this situation.
    It is essentially a property like any other available on the button (e.g. btn.textContent, or btn.style), 
    but it is a special type — when you set it to be equal to some code, that code is run when the event fires on the button.
    You could also set the handler property to be equal to a named function name. Like below:

    i.e. const btn = document.querySelector('button');

        function bgChange() {
        const rndCol = 'rgb(' + random(255) + ',' + random(255) + ',' + random(255) + ')';
        document.body.style.backgroundColor = rndCol;
        }

        btn.onclick = bgChange;

    Apart from onclick, there are many different event handler properties available, like: btn.onfocus, btn.onblur, btn.ondblclick, window.onkeypress, window.onkeydown, window.onkeyup and son on.

3. addEventListener() and removeEventListener()
 The newest type of event mechanism is defined in the Document Object Model (DOM) Level 2 Events Specification, 
 which provides browsers with a new function — addEventListener().
 It functions in a similar way to the event handler properties (the second way), but the syntax is obviously different.
    i.e. const btn = document.querySelector('button');

    function bgChange() {
        const rndCol = 'rgb(' + random(255) + ',' + random(255) + ',' + random(255) + ')';
        document.body.style.backgroundColor = rndCol;
    }   

    btn.addEventListener('click', bgChange);


    Inside the addEventListener() function, we specify two parameters — the name of the event we want to register this handler for, 
    and the code that comprises the handler function we want to run in response to it. 
    Note that it is perfectly appropriate to put all the code inside the addEventListener() function, 
    in an anonymous function, like this:

    btn.addEventListener('click', function() {
        var rndCol = 'rgb(' + random(255) + ',' + random(255) + ',' + random(255) + ')';
        document.body.style.backgroundColor = rndCol;
    });

    This mechanism has some advantages over the older mechanisms discussed earlier: 
    a. it has a counterpart function, removeEventListener(), which removes a previously added listener. i.e. btn.removeEventListener('click', bgChange);
    b. you can also register multiple handlers for the same listener. 
        i.e. myElement.addEventListener('click', functionA);
             myElement.addEventListener('click', functionB);

        However, you cannot achieve this with event handler property:
        i.e. myElement.onclick = functionA;
             myElement.onclick = functionB;
        Here, the second line overwrites the value of onclick set by the first line. So, only the second line gets executed.


NOTE: Event handler property and DOM Level 2 Events (addEventListener(), etc.) are relatively interchangeable, at least for simple uses:

 a. Event handler properties have less power and options, but better cross-browser compatibility (being supported as far back as Internet Explorer 8). 
 You should probably start with these as you are learning.

 b. DOM Level 2 Events (addEventListener(), etc.) are more powerful, but can also become more complex and are less well supported (supported as far back as Internet Explorer 9). 
 You should also experiment with these, and aim to use them where possible.

--------------------------------------
 Event capturing and event bubbling

event.stopPropagation stops the event from bubbling up the event chain (It prevents the event from propagating (or “bubbling up”) the DOM).
event.preventDefault prevents the default action the browser makes on that event ( It stops the browsers default behaviour).



Event capturing
When you use event capturing

               | |
---------------| |-----------------
| element1     | |                |
|   -----------| |-----------     |
|   |element2  \ /          |     |
|   -------------------------     |
|        Event CAPTURING          |
-----------------------------------
the event handler of element1 fires first, the event handler of element2 fires last.


Event bubbling
When you use event bubbling

               / \
---------------| |-----------------
| element1     | |                |
|   -----------| |-----------     |
|   |element2  | |          |     |
|   -------------------------     |
|        Event BUBBLING           |
-----------------------------------
the event handler of element2 fires first, the event handler of element1 fires last.


Any event taking place in the W3C event model is first captured until it reaches the target element and then bubbles up again.

                 | |  / \
-----------------| |--| |-----------------
| element1       | |  | |                |
|   -------------| |--| |-----------     |
|   |element2    \ /  | |          |     |
|   --------------------------------     |
|        W3C event model                 |
------------------------------------------



From w3.org, for event capture:

If the capturing EventListener wishes to prevent further processing of the event from occurring it may call the stopPropagation method of the Event interface. 
This will prevent further dispatch of the event, although additional EventListeners registered at the same hierarchy level will still receive the event. 
Once an event's stopPropagation method has been called, further calls to that method have no additional effect. If no additional capturers exist and stopPropagation has not been called, the event triggers the appropriate EventListeners on the target itself.

For event bubbling:

Any event handler may choose to prevent further event propagation by calling the stopPropagation method of the Event interface. 
If any EventListener calls this method, all additional EventListeners on the current EventTarget will be triggered but bubbling will cease at that level. 
Only one call to stopPropagation is required to prevent further bubbling.

For event cancellation:

Cancellation is accomplished by calling the Event's preventDefault method. 
If one or more EventListeners call preventDefault during any phase of event flow the default action will be canceled.



